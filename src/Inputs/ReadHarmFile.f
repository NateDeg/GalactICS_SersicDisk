cccccccccccccccccccccccccccccccccccccccccccccccccccc
c     
c     This module reads in the harmonics file generated by
c       dbh
ccccccccccccccccccccccccccccccccccccccccccccccccccc

      module ReadHarmMod
      use Globs
      use iniDBHMod
      use DiskObjDef

      implicit none

      contains


ccccc
      subroutine ReadHarmFile(fname)
      implicit none
      character(*) fname
      integer funit,l
      real redge

      open(file='in.gendenspsi',unit=1,status='old')
      read(1,*) npsi
      close(1)

      print*, "Read Harmonics File"

      funit=11
      open(funit,file=fname,status='old')
      call ReadHarmHeader(funit)   !Read in the harmonics file header
      call IniDBH()                 !Initialize all necessary arrays/constants
      call ReadHarmonics(funit,TotPot)  !Read in all the harmonics
      close(funit)
c
c       Correct the potential
c
      redge=nr*dr
      TotPot%potcor=0.
      do l=0,lmaxx,2
c        print*, l
        TotPot%potcor = TotPot%potcor + TotPot%pot(l/2+1,nr)
     &      + TotPot%fr(l/2+1,nr)*redge/(l+1)
      enddo
      TotPot%potcor = TotPot%potcor*plcon(0)
      TotPot%potcor1 = TotPot%potcor
c      print*, "Potential corrections", TotPot%potcor

      return
      end subroutine
ccccccc


ccccc
      subroutine ReadHarmFileGetFreqs(fname)
      implicit none
      character(*) fname
      integer funit

      open(file='in.gendenspsi',unit=1,status='old')
      read(1,*) npsi
      close(1)

      print*, "Read Harmonics File"

      funit=11
      open(funit,file=fname,status='old')
      call ReadHarmHeader(funit)   !Read in the harmonics file header
      call IniDBH()                 !Initialize all necessary arrays/constants
      call ReadHarmonics(funit,TotPot)  !Read in all the harmonics
      call ReadDiskSD(funit)
      close(funit)
      return
      end subroutine
ccccccc


ccccccc
      subroutine ReadHarmHeader(funit)
      implicit none
      integer funit

      read(funit,*)
      read(funit,'(2x,7g15.5,i6,i4)') Halo%chalo,Halo%v0,Halo%a
     &      ,Bulge%nnn,Bulge%v0bulge,Bulge%abulge,
     &     dr,nr,lmaxx
      print*, "In Test 1", dr,nr,lmaxx
      read(funit,*)
      read(funit,'(2x,3g15.8)') DF%psi0,Halo%haloconst
      read(funit,*)
      read(funit,'(2x,7g15.5)') D1%rmdisk, D1%rdisk
     &      ,D1%zdisk, D1%outdisk, D1%drtrunc
     &     ,D1%rhole,D1%rcore, D1%ndisk
      read(funit,*)
      read(funit,'(2x,5g15.5)')
     &     D2%rmdisk, D2%rdisk, D2%zdisk, D2%outdisk, D2%drtrunc
     &     ,D2%rhole,D2%rcore, D2%ndisk
      read(funit,*)
      read(funit,'(2x,8g15.5)')
     &       Gas%rmgas, Gas%rgas, Gas%outgas, Gas%zgas0
     &      ,Gas%drtruncgas, Gas%gamma
      read(funit,*)
      read(funit,'(2x,3g15.5)') DF%psic,DF%psi0mpsid,BH%bhmass
     &                  ,BH%BHsoftening
      DF%psid = DF%psi0 - DF%psi0mpsid
      read(funit,'(2x,6l5)') diskflag1, diskflag2, gasflag,
     &     bulgeflag, haloflag, bhflag

      return
      end subroutine
ccccccccc


cccccc
      subroutine ReadHarmonics(funit,P)
      implicit none
      integer funit
      Type(PotObj) P
      integer ir, l
      real rdum

      read(FUnit,*)
      do ir=0,nr
        read(FUnit,'(8g16.8)') rdum,(P%dens(l/2+1,ir),l=0,lmaxx,2)
      enddo
      read(FUnit,*)
      read(FUnit,*)
      do ir=0,nr
        read(FUnit,'(8g16.8)') rdum,(P%pot(l/2+1,ir),l=0,lmaxx,2)
      enddo
      read(FUnit,*)
      read(FUnit,*)
      do ir=0,nr
        read(FUnit,'(8g16.8)') rdum,(P%fr(l/2+1,ir),l=0,lmaxx,2)
      enddo
      read(FUnit,*)
      read(FUnit,*)
      do ir=0,nr
        read(FUnit,'(8g16.8)') rdum,(P%fr2(l/2+1,ir),l=0,lmaxx,2)
      enddo

      return
      end subroutine
ccccccc

cccccc
      subroutine ReadDiskSD(funit)
      implicit none
      integer funit
      integer ir
      real rdummy
c      if(DiskFlag1 .eqv. .False.) call DiskIni(D1,dr,nr)  !It is necessary to have the surfden arrays allocated
c      if(DiskFlag2 .eqv. .False.) call DiskIni(D2,dr,nr)

      if(DiskFlag1 .eqv. .False.) ALLOCATE(D1%surden(0:nr))  !It is necessary to have the surfden arrays allocated
      if(DiskFlag2 .eqv. .False.) ALLOCATE(D2%surden(0:nr))

      do ir=0,nr
        read(funit,*) rdummy,D1%surden(ir),D2%surden(ir)
      enddo
      return
      end subroutine
ccccccccc


      end module

